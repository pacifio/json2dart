// Copyright (c) 2021, Adib Mohsin
// Credits to https://github.com/javiercbk for making `json_to_dart` package

import 'dart:convert';
import 'dart:io';
import 'package:args/args.dart';
import 'package:http/http.dart' as http;

import 'json_to_dart/json_to_dart.dart';

void quit(String msg) {
  print(msg ?? 'Something went wrong');
  exit(0);
}

Map parseHeaders(String headers) {
  try {
    final result = {};
    final split = headers.split(',');
    split.forEach((header) {
      final data = header.split('=');

      result[data[0]] = data[1];
    });

    return result;
  } catch (_) {
    return {};
  }
}

void main(List<String> arguments) async {
  final stopwatch = Stopwatch()..start();
  final parser = ArgParser();

  parser.addOption('api',
      help: 'API Endpoint required to grab the json from', abbr: 'u');
  parser.addOption('entry',
      help:
          'Entry point for json data structure , e.g data.data will get the nested data array/object from API response',
      abbr: 'e');
  parser.addOption('name',
      help: 'Name of your data class', abbr: 'n', defaultsTo: 'AutoGenerated');
  parser.addOption('headers', help: 'Headers for your API endpoint', abbr: 'h');
  parser.addOption('method',
      help: 'Method for http request , defaults to GET',
      abbr: 'm',
      defaultsTo: 'GET');
  parser.addFlag('null-safe',
      negatable: false,
      defaultsTo: false,
      help:
          'Add this flag if you want to generate null safe code , by default we will generate without null safety !');

  try {
    final results = parser.parse(arguments);

    if (results['null-safe']) {
      print('You have turned on null safety !');
    }

    if (results['api'] != null) {
      try {
        String body;
        int statusCode;

        try {
          final url = Uri.parse(results['api']);
          final header = parseHeaders(results['headers']);

          if (results['method'].toString().trim().toLowerCase() == 'get') {
            final response =
                await http.get(url, headers: Map<String, String>.from(header));
            body = response.body;
            statusCode = response.statusCode;
          } else if (results['method'].toString().trim().toLowerCase() ==
              'post') {
            final response =
                await http.post(url, headers: Map<String, String>.from(header));
            body = response.body;
            statusCode = response.statusCode;
          } else {
            quit('Only get and post methods are supported');
          }
        } catch (e) {
          quit('Could not send request , quitting !');
        }

        if (statusCode != null) {
          if (statusCode == 200) {
            try {
              final parsed = jsonDecode(body);

              dynamic finalData;

              if (results['entry'] != null) {
                try {
                  final split = results['entry'].toString().trim().split('.');

                  if (split.length == 1) {
                    finalData = parsed[split[0]];
                  } else {
                    finalData = parsed;
                    split.forEach((element) {
                      finalData = finalData[element];
                    });
                  }
                } catch (_) {
                  print('Entry is not valid , using default data');
                  finalData = parsed;
                }
              } else {
                finalData = parsed;
              }

              if (finalData != null) {
                final name = results['name'];
                final encoder = JsonEncoder.withIndent('  ');

                print('FILTERED JSON RESPONSE \n');
                print(encoder.convert(finalData));

                try {
                  final stringify = jsonEncode(finalData);
                  final classGenerator = ModelGenerator(name);
                  final dartCode = classGenerator.generateDartClasses(
                    stringify,
                    nullSafe: results['null-safe'],
                  );

                  try {
                    var file = File('$name.dart');

                    file.writeAsString(dartCode.code).then((_) {
                      print('Model created successfully\n');
                      print(
                          'Took ${stopwatch.elapsed.inMilliseconds / 1000} seconds !');
                    });
                  } catch (_) {
                    quit('Could not write to file');
                  }
                } catch (e) {
                  print("\n");
                  print(e);
                  quit('Could not generate models !');
                }
              } else {
                quit('Something went wrong , could not parse JSON');
              }
            } catch (_) {
              quit('Error parsing JSON body , quitting !');
            }
          } else if (statusCode == 400) {
            quit('Server not found , quitting !');
          } else if (statusCode == 401) {
            quit('Authorization error , consider providing an access token');
          } else {
            quit('Server didn\'nt respond , status code $statusCode');
          }
        }
      } on Exception catch (_) {
        quit('Could not parse API endpoint , quitting !');
      }
    } else {
      quit('API is an empty string , quitting !');
    }
  } on FormatException catch (_) {
    print(parser.usage);
  }
}
